/**
 * Meeting App - Express.js Application
 * „É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞Âæå„ÅÆ„É°„Ç§„É≥„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„Éï„Ç°„Ç§„É´
 */

const express = require('express');
const cors = require('cors');
const config = require('./config');

// „Éü„Éâ„É´„Ç¶„Çß„Ç¢
const { requestLogger, securityHeaders, apiUsageTracker, simpleRateLimit } = require('./middleware/logger');
const { notFoundHandler, errorHandler } = require('./middleware/errorHandler');

// „É´„Éº„Éà
const meetingRoutes = require('./routes/meetingRoutes');
const audioRoutes = require('./routes/audioRoutes');
const anniversaryRoutes = require('./routes/anniversaryRoutes');
const healthRoutes = require('./routes/healthRoutes');

// Express „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÂàùÊúüÂåñ
const app = express();

// Âü∫Êú¨„Éü„Éâ„É´„Ç¶„Çß„Ç¢Ë®≠ÂÆö
app.use(cors({
  origin: config.cors.origin,
  credentials: true,
}));

app.use(express.json({ limit: '50mb' }));
app.use(express.raw({ type: 'audio/*', limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Å®„É≠„Ç∞„Éü„Éâ„É´„Ç¶„Çß„Ç¢
app.use(securityHeaders);
app.use(requestLogger);
app.use(apiUsageTracker);

// „É¨„Éº„ÉàÂà∂ÈôêÔºàÊú¨Áï™Áí∞Â¢É„ÅÆ„ÅøÔºâ
if (config.server.environment === 'production') {
  app.use(simpleRateLimit({
    windowMs: 15 * 60 * 1000, // 15ÂàÜ
    maxRequests: 1000, // 1000„É™„ÇØ„Ç®„Çπ„Éà/15ÂàÜ
    message: 'APIÂà©Áî®Âà∂Èôê„Å´ÈÅî„Åó„Åæ„Åó„Åü„ÄÇ„Åó„Å∞„Çâ„ÅèÂæÖ„Å£„Å¶„Åã„ÇâÂÜçË©¶Ë°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ',
  }));
}

// „É´„Éº„ÉàË®≠ÂÆö
app.use('/', healthRoutes);           // „Éò„É´„Çπ„ÉÅ„Çß„ÉÉ„ÇØ„Éª„Ç∑„Çπ„ÉÜ„É†ÊÉÖÂ†±
app.use('/', meetingRoutes);          // ‰ºöË≠∞Èñ¢ÈÄ£API
app.use('/', audioRoutes);            // Èü≥Â£∞Èñ¢ÈÄ£API
app.use('/', anniversaryRoutes);      // Ë®òÂøµÊó•Èñ¢ÈÄ£API

// API‰ΩøÁî®ÈáèÁµ±Ë®à„Ç®„É≥„Éâ„Éù„Ç§„É≥„ÉàÔºàÈñãÁô∫Áí∞Â¢É„ÅÆ„ÅøÔºâ
if (config.server.environment === 'development') {
  const { getApiUsageStats } = require('./middleware/logger');
  app.get('/stats/usage', (req, res) => {
    res.json({
      usage: getApiUsageStats(),
      note: '„Åì„ÅÆÁµ±Ë®à„ÅØÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ„ÅøÂà©Áî®ÂèØËÉΩ„Åß„Åô',
    });
  });
}

// 404„Éè„É≥„Éâ„É©„Éº
app.use(notFoundHandler);

// „Ç∞„É≠„Éº„Éê„É´„Ç®„É©„Éº„Éè„É≥„Éâ„É©„Éº
app.use(errorHandler);

// „Çµ„Éº„Éê„ÉºËµ∑Âãï
const PORT = config.server.port;
const server = app.listen(PORT, () => {
  console.log(`üöÄ Server is running on http://localhost:${PORT}`);
});

// „Ç∞„É¨„Éº„Çπ„Éï„É´„Ç∑„É£„ÉÉ„Éà„ÉÄ„Ç¶„É≥
process.on('SIGTERM', () => {
  console.log('üîÑ SIGTERM received, shutting down gracefully...');
  server.close(() => {
    console.log('‚úÖ Server closed successfully');
    process.exit(0);
  });
});

process.on('SIGINT', () => {
  console.log('üîÑ SIGINT received, shutting down gracefully...');
  server.close(() => {
    console.log('‚úÖ Server closed successfully');
    process.exit(0);
  });
});

// Êú™Âá¶ÁêÜ„ÅÆ‰æãÂ§ñ„Çí„Ç≠„É£„ÉÉ„ÉÅ
process.on('uncaughtException', (err) => {
  console.error('‚ùå Uncaught Exception:', err);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
  process.exit(1);
});

module.exports = app;
